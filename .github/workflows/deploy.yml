name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: üîß Build & Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Github Repository ÌååÏùº Î∂àÎü¨Ïò§Í∏∞
        uses: actions/checkout@v4

      - name: ‚òï JDK 21Î≤ÑÏ†Ñ ÏÑ§Ïπò
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: üß™ ÌÖåÏä§Ìä∏ Î∞è ÎπåÎìúÌïòÍ∏∞
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: üîê AWS ÏûêÍ≤© Ï¶ùÎ™Ö ÏÑ§Ï†ï
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: üîê ECR Î°úÍ∑∏Ïù∏
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üê≥ Docker Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
        run: docker build -t ${{ secrets.IMAGE_NAME }} .

      - name: üè∑Ô∏è Docker Ïù¥ÎØ∏ÏßÄÏóê Tag Î∂ôÏù¥Í∏∞
        run: docker tag ${{ secrets.IMAGE_NAME }} ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPOSITORY_NAME }}:${{ secrets.IMAGE_NAME }}

      - name: üöÄ ECRÏóê Docker Ïù¥ÎØ∏ÏßÄ Push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPOSITORY_NAME }}:${{ secrets.IMAGE_NAME }}

  deploy-to-ec2:
    name: üöÄ Deploy To EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: üîë SSHÎ°ú EC2Ïóê Ï†ëÏÜç Î∞è Î∞∞Ìè¨
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            # ECR Î°úÍ∑∏Ïù∏
            aws ecr get-login-password --region ap-northeast-2 | \
              docker login --username AWS --password-stdin 869508798906.dkr.ecr.ap-northeast-2.amazonaws.com

            # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï†ïÏßÄ Î∞è ÏÇ≠Ï†ú
            docker stop ${{ secrets.IMAGE_NAME }} || true
            docker rm ${{ secrets.IMAGE_NAME }} || true

            # ÏµúÏã† Ïù¥ÎØ∏ÏßÄ Pull
            docker pull 869508798906.dkr.ecr.ap-northeast-2.amazonaws.com/${{ secrets.REPOSITORY_NAME }}:latest

            # ‚úÖ credentials.json ÌååÏùº ÏÉùÏÑ± (base64 Ïù∏ÏΩîÎî©Îêú Í≤ΩÏö∞ÏóêÎäî decode ÌïÑÏöî)
            echo '${{ secrets.GOOGLE_CREDENTIALS }}' > /home/ubuntu/credentials.json

            # Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
            docker run -d --name ${{ secrets.IMAGE_NAME }} -p 8080:8080 \
              --network ${{secrets.DOCKER_NETWORK_NAME}} \
              -v /home/ubuntu/credentials.json:/app/credentials.json \
              -e GOOGLE_APPLICATION_CREDENTIALS="/app/credentials.json" \
              -e S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY }}" \
              -e EC2_HOST="${{ secrets.EC2_HOST }}" \
              -e S3_BUCKET="${{ secrets.S3_BUCKET }}" \
              -e S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}" \
              -e DB_URL="${{ secrets.DB_URL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e EUREKA_DEFAULTZONE="${{ secrets.EUREKA_DEFAULTZONE }}" \
              -e MAIL_HOST="${{ secrets.MAIL_HOST }}" \
              -e MAIL_PORT="${{ secrets.MAIL_PORT }}" \
              -e MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}" \
              -e MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}" \
              -e REDIS_PORT="${{ secrets.REDIS_PORT }}" \
              869508798906.dkr.ecr.ap-northeast-2.amazonaws.com/${{ secrets.REPOSITORY_NAME }}:latest
