@startuml NewsletterServiceArchitecture
!theme plain
skinparam classAttributeIconSize 0
skinparam packageStyle rectangle
skinparam backgroundColor white
skinparam classFontSize 10
skinparam packageFontSize 12
skinparam packageFontStyle bold
direction TB

package "Application Layer" {
  class NewsletterController {
    - newsletterService: NewsletterService
    + POST /newsletters
    + GET /newsletters/{id}
    + PUT /newsletters/{id}
    + DELETE /newsletters/{id}
  }
  
  class SubscriberController {
    - subscriberService: SubscriberService
    + POST /subscribers
    + GET /subscribers/{id}
    + PUT /subscribers/{id}
    + DELETE /subscribers/{id}
  }
  
  class NewsletterService {
    - newsletterRepository: NewsletterRepository
    - emailService: EmailService
    + createNewsletter()
    + sendNewsletter()
    + scheduleNewsletter()
  }
  
  class SubscriberService {
    - subscriberRepository: SubscriberRepository
    + addSubscriber()
    + removeSubscriber()
    + updateSubscriber()
    + getSubscribers()
  }
}

package "Infrastructure Layer" {
  class NewsletterRepository {
    + save(Newsletter)
    + findById(Long)
    + findAll()
    + delete(Newsletter)
  }
  
  class SubscriberRepository {
    + save(Subscriber)
    + findById(Long)
    + findByEmail(String)
    + delete(Subscriber)
  }
  
  class EmailService {
    + sendEmail(String, String, String)
    + sendBulkEmail(List<String>, String)
  }
  
  class NewsletterEntity {
    - id: Long
    - title: String
    - content: String
    - status: String
    - createdAt: LocalDateTime
  }
  
  class SubscriberEntity {
    - id: Long
    - email: String
    - name: String
    - isActive: Boolean
    - createdAt: LocalDateTime
  }
}

package "Core Domain" {
  class Newsletter {
    - id: Long
    - title: String
    - content: String
    - status: NewsletterStatus
    - subscribers: List<Subscriber>
    + createNewsletter()
    + sendNewsletter()
    + scheduleNewsletter()
  }
  
  class Subscriber {
    - id: Long
    - email: String
    - name: String
    - isActive: Boolean
    - subscribedAt: LocalDateTime
    + subscribe()
    + unsubscribe()
    + updatePreferences()
  }
  
  enum NewsletterStatus {
    DRAFT
    SCHEDULED
    SENDING
    SENT
    FAILED
  }
}

' Relationships
NewsletterController --> NewsletterService
SubscriberController --> SubscriberService

NewsletterService --> NewsletterRepository
NewsletterService --> EmailService
SubscriberService --> SubscriberRepository

NewsletterRepository --> NewsletterEntity
SubscriberRepository --> SubscriberEntity

NewsletterEntity --> Newsletter
SubscriberEntity --> Subscriber

Newsletter --> Subscriber
Newsletter --> NewsletterStatus

@enduml
